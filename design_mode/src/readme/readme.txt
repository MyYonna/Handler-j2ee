设计模式的最终目的是解耦
代码层面的目的是在以后的维护中尽可能的少改动当前的代码，达到以较少的工作量满足改动的需求。
良好的程序设计可以尽可能的适应以后变化的需求
设计模式是OO设计原则的良好使用经验的总结


接口虽然可以解决继承带来的行为不恰当（并非所有的类都具有所有的行为）的问题，但是因为接口本身不具有实现代码却导致代码无法被复用

OO的基础是抽象、封装、多态、继承
OO的设计原则
1、找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。（封装变化）
注：把变化的部分取出来封装起来，以便以后可以轻易地改动和扩充此部分，而不影响不需要变化的其他部分
2、针对接口编程，而不是针对实现编程
注：行为来自超类的具体实现或者继承某个接口并由子类自行实现而来，这两种做法都是依赖于“实现”，我们被实现绑得死死的，没办法更改行为（除非写更多的代码）
        好处是在运行时才制定具体实现的对象
3、多用组合，少用继承 
注：在运行时动态地改变行为
4、为了交互对象之间的松耦合设计二努力
注：降低对象之间的相互依赖程度


设计模式
策略模式：定义了算法族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化独立于使用算法的客户
观察者模式：定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者多会收到通知并自动更新
