分布式java应用
大型应用通常会拆分成多个子系统来实现。对于java来说，这些子系统可能部署在同一台机器的多个不同的jvm中，也可能部署在不同的机器上，但这些子系统又不是完全独立的
要相互通信来共同实现业务功能，对于此类java应用，我们成为分布式java应用

系统间通信：
   1、基于消息方式实现系统间的通信
            消息方式的系统间通信通常是基于网络协议来实现的
                        常用的实现系统间通信的协议有：TCP/IP  UDP/IP 
                          Tcp/Ip是一种可靠的网络数据传输协议。要求通信双方必须首先建立连接，之后再进行数据的传输。
                          UDP/IP是一种不保证数据一定到达的网络数据传输协议。并不直接给通信双方建立连接，而是发送到网络上进行传递。
		TCP/IP和UDP/IP 可用于完成数据的传输，但是要完成系统间通信，还需要对数据进行处理。

                          数据处理的方式分为：同步IO和异步IO
                                                                       其中同步IO中最常用的是BIO和NIO
                 	BIO即同步阻塞IO操作。当发起IO操作时，1、进程等待内核准备数据完毕，2、进程进入阻塞方式运行，等待内核将数据拷贝进用户进程，完毕之后才释放资源。
                    NIO是基于事件驱动思想的，实现上通常采用Reactor模式。当发起IO操作时，1、内核准备数据，2、进程以非阻塞方式运行，但会轮询检查内核准备数据的状态，所以会在两个进程之间进行频繁切换，当内核准备数据完毕之后，操作系统会相应的通知应用程序进行处理，应用再将流读取到缓冲区或者写入操作系统。
                    AIO是基于Proactor模式，与NIO不同得是，它是在内核将数据拷贝进入用户进程后才通知应用程序（即当从缓存中读取数据完毕或者操作系统写入完毕之后才通知应用程序）
       
       IO中同步、异步与阻塞、非阻塞的区别：
       	首先在进行说明之前普及IO发生时涉及的对象和步骤:
       	        涉及到的两个对象，一个是调用这个IO的进程，另外一个是系统内核
                                  经历两个阶段：1、内核等待数据准备，2、将数据从内核拷贝到进程中
         
		         同步和异步是针对应用程序和内核的交互而言的；它们是消息的通知机制（第一阶段）
		
		       同步指的是用户进程触发IO操作并等待或者轮询的去查看IO操作是否就绪（即进程要去等待或者轮询查看内核中数据准备是否完毕），
		
		       异步是指用户进程触发IO操作以后便开始做自己的事情，而当IO操作已经完成的时候会得到IO完成的通知。
		
		 
		
		阻塞和非阻塞是针对于进程在访问数据的时候，根据IO操作的就绪状态来采取的不同方式，即在读取或者写入数据返回之前，进程的状态；（第二阶段）
		
		       阻塞方式下读取或者写入函数，并在读取或者写入完成之前一直等待，
		
		       非阻塞方式下，读取或者写入函数会立即返回一个状态值
       	        
		同步/异步与阻塞/非阻塞的组合分析
			同步阻塞形式:
			  效率是最低的，
			  拿上面的例子来说，就是你专心排队，什么别的事都不做。
			
			异步阻塞形式:
			  如果在银行等待办理业务的人采用的是异步的方式去等待消息被触发,也就是领了一张小纸条,
			  假如在这段时间里他不能离开银行做其它的事情,那么很显然,这个人被阻塞在了这个等待的操作上面;
			
			
			  异步操作是可以被阻塞住的,只不过它不是在处理消息时阻塞,而是在等待消息被触发时被阻塞.
			  比如select 函数,
			  假如传入的最后一个timeout 参数为NULL,那么如果所关注的事件没有一个被触发,
			  程序就会一直阻塞在这个select 调用处.
			
			同步非阻塞形式:
			  实际上是效率低下的,
			  想象一下你一边打着电话一边还需要抬头看到底队伍排到你了没有,
			  如果把打电话和观察排队的位置看成是程序的两个操作的话,
			  这个程序需要在这两种不同的行为之间来回的切换,效率可想而知是低下的;
			
			  很多人会写阻塞的read/write 操作,
			  但是别忘了可以对fd 设置O_NONBLOCK 标志位,这样就可以将同步操作变成非阻塞的了;
			
			异步非阻塞形式:
			  效率更高,
			  因为打电话是你(等待者)的事情,而通知你则是柜台(消息触发机制)的事情,
			  程序没有在两种不同的操作中来回切换.


       
			一般来说I/O模型可以分为：同步阻塞，JAVA传统的IO模型属   不可以走也不会走，走不了
							    同步非阻塞  JAVA的NIO就属于同步非阻塞IO。 不可以一走了之，需要时不时回来查看状态
			                                                            异步阻塞  可以走但是不走，还是走不了
							    异步非阻塞IO  可以走也会走，走了
							    
		2、基于远程调用方式实现系统间的通信    
		    在java中的主要实现基于RMI和WebService的应用

		    
		    基于java自身包实现消息方式的系统间通信的方式有TCP/IP+BIO 、 TCP/IP+NIO、UDP/IP+BIO、UDP/IP+NIO